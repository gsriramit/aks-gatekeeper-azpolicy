apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurepodspreadconstraintsenforced
spec:
  crd:
    spec:
      names:
        kind: K8sAzurePodSpreadConstraintEnforced
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            excludedContainers:
              type: array
              items:
                type: string
            excludedImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurepodspreadconstraintsenforced

        import data.lib.exclude_container_image.is_excluded

        # The following scenerios will be viewed as violations. Windows containers are not supported
        ## allowPrivilegeEscalation=true
        ## runAsUser != 0 + missing allowPrivilegeEscalation=false

        violation[{"msg": msg, "details": {}}] {            
            spec := input.request.object.spec
            podSpreadConstraintDefined(spec)
            SpreadConstraintsEmpty(spec)
            msg := sprintf("At least 1 spread constraint needs to be defined: %v", [])   
        }

        has_key(x, k) { 
          # https://www.openpolicyagent.org/docs/latest/policy-reference/#types
          #_ = x[k]
          type_name(x[k])
        }

        podSpreadConstraintDefined(spec) {	 
            has_key(spec,"topologySpreadConstraints")
        }

        SpreadConstraintsEmpty(spec) {
              constraintcount:= count(spec.topologySpreadConstraints) 
              constraintcount == 0
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }